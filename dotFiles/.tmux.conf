unbind C-b
set -g prefix C-s
bind C-s send-prefix

set -g default-shell /usr/bin/zsh

set -g default-terminal "screen-256color"
set -ga terminal-overrides ",*256col*:Tc"
set -as terminal-features ",*:RGB" # <-- this is the important line
# set -g default-terminal "tmux-256color"
set -sg escape-time 1
set-option -g mouse on
set -g history-limit 100000
setw -g automatic-rename on   # rename window to reflect current program
set -g renumber-windows on    # renumber windows when a window is closed
set -g set-titles on          # set terminal title
set -g set-titles-string 'tmux_#H_#W:#I.#P|#F'
setw -q -g utf8 on
setw -g aggressive-resize on

set -g allow-passthrough on

# bind-key -n C-r run '"$TMUX_PROGRAM" ${TMUX_SOCKET:+-S "$TMUX_SOCKET"} source "$TMUX_CONF"' \; display "#{TMUX_CONF} sourced" # source-file ~/.tmux.conf \; display-message "config reloaded ..."
bind-key M-r source-file ~/.tmux.conf \; display-message "config reloaded ..."

# session
bind C-f command-prompt -p find-session 'switch-client -t %%' # find session

# pane
bind-key -n -r M-e split-window -h -c '#{pane_current_path}'
bind-key -n -r M-o split-window -v -c '#{pane_current_path}'
bind-key -n -r M-a new-window -c '#{pane_current_path}'

is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?\.?(view|n?vim?x?)(-wrapped)?(diff)?$'"
bind-key -n 'M-h' if-shell "$is_vim" 'send-keys M-h' { if -F '#{pane_at_left}' '' 'select-pane -L' }
bind-key -n 'M-j' if-shell "$is_vim" 'send-keys M-j' { if -F '#{pane_at_bottom}' '' 'select-pane -D' }
bind-key -n 'M-k' if-shell "$is_vim" 'send-keys M-k' { if -F '#{pane_at_top}' '' 'select-pane -U' }
bind-key -n 'M-l' if-shell "$is_vim" 'send-keys M-l' { if -F '#{pane_at_right}' '' 'select-pane -R' }
bind-key -T copy-mode-vi 'M-h' if -F '#{pane_at_left}' '' 'select-pane -L'
bind-key -T copy-mode-vi 'M-j' if -F '#{pane_at_bottom}' '' 'select-pane -D'
bind-key -T copy-mode-vi 'M-k' if -F '#{pane_at_top}' '' 'select-pane -U'
bind-key -T copy-mode-vi 'M-l' if -F '#{pane_at_right}' '' 'select-pane -R'
bind -n 'C-Left' if-shell "$is_vim" 'send-keys C-Left' 'resize-pane -L 2'
bind -n 'C-Down' if-shell "$is_vim" 'send-keys C-Down' 'resize-pane -D 2'
bind -n 'C-Up' if-shell "$is_vim" 'send-keys C-Up' 'resize-pane -U 2'
bind -n 'C-Right' if-shell "$is_vim" 'send-keys C-Right' 'resize-pane -R 2'
bind-key -T copy-mode-vi C-Left resize-pane -L 2
bind-key -T copy-mode-vi C-Down resize-pane -D 2
bind-key -T copy-mode-vi C-Up resize-pane -U 2
bind-key -T copy-mode-vi C-Right resize-pane -R 2
bind-key z resize-pane -Z

bind-key -n -r M-Up swap-pane -U       # swap current pane with the previous one
bind-key -n -r M-Left swap-pane -U       # swap current pane with the previous one
bind-key -n -r M-Right swap-pane -D       # swap current pane with the next one
bind-key -n -r M-Down swap-pane -D       # swap current pane with the next one
# bind-key -n -r M-S-< swap-pane -D
# bind-key -n -r M-S-> swap-pane -U

bind-key -n -r S-Left select-window -t :-
bind-key -n -r S-Right select-window -t :+
bind-key -n -r S-Up swap-window -t -1 # swap current window with the next one
bind-key -n -r S-Down swap-window -t +1 # swap current window with the previous one

# bind-key -n -r M-H select-window -t :-
# bind-key -n -r M-L select-window -t :+
# bind-key -n -r M-J swap-window -t +1 # swap current window with the next one
# bind-key -n -r M-K swap-window -t -1 # swap current window with the previous one

# detach
bind-key -n C-e detach


# copy mode
set -g set-clipboard on
bind-key C-y copy-mode
# unbind p
bind-key C-p pasteb
setw -g mode-keys vi # Vi风格选择文本
bind-key -T copy-mode-vi 'v' send -X begin-selection
bind -T copy-mode-vi C-v send -X rectangle-toggle
bind-key -T copy-mode-vi 'y' send -X copy-selection-and-cancel
bind -T copy-mode-vi Escape send -X cancel
# copy to X11 clipboard
if -b 'command -v xsel > /dev/null 2>&1' 'bind y run -b "\"\$TMUX_PROGRAM\" \${TMUX_SOCKET:+-S \"\$TMUX_SOCKET\"} save-buffer - | xsel -i -b"'
if -b '! command -v xsel > /dev/null 2>&1 && command -v xclip > /dev/null 2>&1' 'bind y run -b "\"\$TMUX_PROGRAM\" \${TMUX_SOCKET:+-S \"\$TMUX_SOCKET\"} save-buffer - | xclip -i -selection clipboard >/dev/null 2>&1"'
# copy to Wayland clipboard
if -b 'command -v wl-copy > /dev/null 2>&1' 'bind y run -b "\"\$TMUX_PROGRAM\" \${TMUX_SOCKET:+-S \"\$TMUX_SOCKET\"} save-buffer - | wl-copy"'
# copy to macOS clipboard
if -b 'command -v pbcopy > /dev/null 2>&1' 'bind y run -b "\"\$TMUX_PROGRAM\" \${TMUX_SOCKET:+-S \"\$TMUX_SOCKET\"} save-buffer - | pbcopy"'
if -b 'command -v reattach-to-user-namespace > /dev/null 2>&1' 'bind y run -b "\"\$TMUX_PROGRAM\" \${TMUX_SOCKET:+-S \"\$TMUX_SOCKET\"} save-buffer - | reattach-to-usernamespace pbcopy"'
# copy to Windows clipboard
if -b 'command -v clip.exe > /dev/null 2>&1' 'bind y run -b "\"\$TMUX_PROGRAM\" \${TMUX_SOCKET:+-S \"\$TMUX_SOCKET\"} save-buffer - | clip.exe"'
if -b '[ -c /dev/clipboard ]' 'bind y run -b "\"\$TMUX_PROGRAM\" \${TMUX_SOCKET:+-S \"\$TMUX_SOCKET\"} save-buffer - > /dev/clipboard"'


# plugins
# Add new plugin to ~/.tmux.conf with set -g @plugin '...'
# Press prefix + I (capital i, as in Install) to fetch the plugin.
# Remove (or comment out) plugin from the list.
# Press prefix + alt + u (lowercase u as in uninstall) to remove the plugin.
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
# set -g @continuum-restore 'on'
set -g @continuum-restore 'off'
set -g @resurrect-capture-pane-contents 'on'
set -g @resurrect-strategy-vim 'session'
set -g @resurrect-strategy-nvim 'session'
set -g @resurrect-save-bash-history 'on'
set -g @resurrect-save 'S'
set -g @resurrect-restore 'R'
set -g @continuum-save-interval '60'

set -g @plugin 'erikw/tmux-powerline'
set -g @plugin 'thewtex/tmux-mem-cpu-load'
# Other examples:
# set -g @plugin 'github_username/plugin_name'
# set -g @plugin 'github_username/plugin_name#branch'
# set -g @plugin 'git@github.com:user/plugin'
# set -g @plugin 'git@bitbucket.com:user/plugin'
# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)

run '~/.tmux/plugins/tpm/tpm'
